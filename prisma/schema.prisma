





generator client {
    provider = "prisma-client-js"
  }
  
  datasource db {
    provider = "mongodb"
    url = env("DATABASE_URL")
    relationMode = "prisma"
  }
  
  model Profile {
    id String @id @default(auto()) @db.ObjectId @map("_id")
    userId String @unique
    name String
    imageUrl String 
    email String 
  
    servers Server[]
    members Member[]
    channels Channel[]
  
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
  }
  
  model Server {
    id String @id @default(auto()) @db.ObjectId @map("_id")
    name String
    imageUrl String 
    inviteCode String @unique
  
    profileId String @db.ObjectId
    profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
    members Member[]
    channels Channel[]
  
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
  
    @@index([profileId])
  }
  
  enum MemberRole {
    ADMIN
    MODERATOR
    GUEST
  }
  
  model Member {
    id String @id @default(auto()) @db.ObjectId @map("_id")
    role MemberRole @default(GUEST)
  
    profileId String @db.ObjectId
    profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
    serverId String @db.ObjectId
    server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
    
    messages Message[]
  
    directMessages DirectMessage[]
    conversationsInitiated Conversation[] @relation("MemberOne")
    conversationsReceived Conversation[] @relation("MemberTwo")
  
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
  
    @@index([profileId])
    @@index([serverId])
  }
  
  enum ChannelType {
    TEXT
    AUDIO
    VIDEO
  }
  
  model Channel {
    id String @id @default(auto()) @db.ObjectId @map("_id")
    name String
    type ChannelType @default(TEXT)
  
    profileId String @db.ObjectId
    profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
    serverId String @db.ObjectId
    server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
  
    messages Message[]
  
    @@index([profileId])
    @@index([serverId])
  }
  
  model Message {
  
    id String @id @default(uuid()) @map("_id")
    content String @db.String
    fileUrl String? @db.String
    memberId String @db.ObjectId
    member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  
    channelId String @db.ObjectId
    channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  
    deleted Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([channelId])
    @@index([memberId])
  
  
  }
  
  model Conversation {
    id String @id @default(uuid()) @map("_id")
  
    memberOneId String @db.ObjectId
    memberOne Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  
    memberTwoId String @db.ObjectId
    memberTwo Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    directMessages DirectMessage[]
    @@index([memberOneId])
    @@index([memberTwoId])
  
  
  }
  
  model DirectMessage {
    id String @id @default(uuid()) @map("_id")
    content String @db.String
    fileUrl String? @db.String
  
    memberId String
    member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  
    conversationId String
    conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    deleted Boolean @default(false)
    @@index([memberId])
    @@index([conversationId])
  }